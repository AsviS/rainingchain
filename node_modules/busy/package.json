{
  "name": "busy",
  "description": "Detect if event loop is busy.",
  "version": "0.1.1",
  "author": {
    "name": "Oleg Slobodskoi",
    "email": "oleg008@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:kof/node-busy.git"
  },
  "keywords": [
    "event",
    "loop",
    "busy",
    "blocked",
    "warn"
  ],
  "engines": {},
  "devDependencies": {
    "commander": "1.1.1"
  },
  "scripts": {},
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "## Detect if event loop is busy.\n\nThe idea is not new, implementation probably too. I just saw this https://github.com/lloyd/node-toobusy and found it useful. This projects does pretty the same but in pure javascript.\n\n## Things you can do\n\n- Log how busy is the loop\n- Stop accepting new tasks\n- Warn yourself\n- Scale up the app\n\n## Example (shameless copied from toobusy)\n\n    var busy = require('busy'),\n        express = require('express');\n\n    var app = express();\n\n    var busyCheck = busy(function(amount) {\n        console.log('Loop was busy for', amount, 'ms');\n    });\n\n    // middleware which blocks requests when we're too busy\n    app.use(function(req, res, next) {\n        if (busyCheck.blocked) {\n            res.send(503, \"I'm busy right now, sorry.\");\n        } else {\n            next();\n        }\n    });\n\n    app.get('/', function(req, res) {\n        // processing the request requires some work!\n        var i = 0;\n        while (i < 1e5) i++;\n        res.send(\"I counted to \" + i);\n    });\n\n    var server = app.listen(3000);\n\n    process.on('SIGINT', function() {\n        server.close();\n        // calling .stop allows your process to exit normally\n        busyCheck.stop();\n        process.exit();\n    });\n\n## Api `busy([options], [callback])`\n\nOptional options:\n\n    - `max` max time in ms alowed to be busy, default is 100ms\n    - `interval` how often to check the state in ms, default is 50ms\n\nOptional callback is called every time the event loop was busy for longer amount of time than defined in `max`. Passed value is amount of ms the loop was blocked for.\n\n\n    var busyCheck = busy();\n\n    busyCheck.blocked; // Is true if by the last check, max was exceeded\n    busyCheck.blockedFor; // Number in ms the loop was blocked for, during the last check\n\n    busyCheck.stop(); // Stop doing checks\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/kof/node-busy/issues"
  },
  "homepage": "https://github.com/kof/node-busy",
  "_id": "busy@0.1.1",
  "dist": {
    "shasum": "6692613704cb77ff1f21338e1829042cd7016623"
  },
  "_from": "busy@",
  "_resolved": "https://registry.npmjs.org/busy/-/busy-0.1.1.tgz"
}
